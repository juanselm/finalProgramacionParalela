"""
Demo de HU06: Selecci√≥n personalizada de destino
Como usuario, quiero guardar el archivo comprimido en la ruta que yo elija.
"""

import os
import sys
import tempfile
import tkinter as tk
from tkinter import messagebox
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from gui.main_window import MainWindow


def create_demo_file():
    """Crea un archivo de demostraci√≥n para la prueba"""
    demo_content = """
    Este es un archivo de demostraci√≥n para probar HU06.
    
    Contenido de ejemplo:
    - L√≠nea 1 con texto variado
    - L√≠nea 2 con m√°s contenido
    - L√≠nea 3 para hacer el archivo m√°s grande
    
    """ * 100  # Repetir para hacer el archivo m√°s grande
    
    demo_file = os.path.join(tempfile.gettempdir(), "demo_hu06_input.txt")
    with open(demo_file, 'w', encoding='utf-8') as f:
        f.write(demo_content)
    
    return demo_file


def demo_hu06():
    """Demostraci√≥n interactiva de HU06"""
    print("="*80)
    print("üéØ DEMO HU06: SELECCI√ìN PERSONALIZADA DE DESTINO")
    print("="*80)
    print()
    print("Esta demostraci√≥n muestra:")
    print("‚úÖ Selecci√≥n personalizada de la carpeta de destino")
    print("‚úÖ Extensi√≥n .pz autom√°tica")
    print("‚úÖ Validaci√≥n de permisos de escritura")
    print("‚úÖ Confirmaci√≥n de sobrescritura")
    print()
    
    # Crear archivo de demostraci√≥n
    demo_file = create_demo_file()
    print(f"üìÑ Archivo de demostraci√≥n creado: {demo_file}")
    print(f"üìä Tama√±o: {os.path.getsize(demo_file)} bytes")
    print()
    
    try:
        print("üöÄ Iniciando aplicaci√≥n con interfaz gr√°fica...")
        print()
        print("INSTRUCCIONES PARA LA DEMOSTRACI√ìN:")
        print("-" * 40)
        print("1. Seleccione el archivo de demostraci√≥n creado")
        print("2. Observe que se sugiere autom√°ticamente un destino con extensi√≥n .pz")
        print("3. Use 'Elegir Destino' para cambiar la ubicaci√≥n si desea")
        print("4. Inicie la compresi√≥n y observe el progreso")
        print("5. Verifique que el archivo se guarde en la ubicaci√≥n elegida")
        print()
        print("Caracter√≠sticas de HU06 que puede probar:")
        print("‚Ä¢ Cambio de carpeta de destino")
        print("‚Ä¢ Cambio de nombre del archivo")
        print("‚Ä¢ Extensi√≥n .pz autom√°tica")
        print("‚Ä¢ Validaci√≥n de permisos")
        print("‚Ä¢ Confirmaci√≥n de sobrescritura")
        print()
        
        # Crear y ejecutar la aplicaci√≥n
        app = MainWindow()
        
        # Configurar t√≠tulo personalizado para el demo
        app.root.title("Demo HU06 - Selecci√≥n de Destino Personalizada")
        
        # Mostrar mensaje inicial
        messagebox.showinfo("Demo HU06", 
                          f"Archivo de demostraci√≥n creado en:\n{demo_file}\n\n"
                          "Por favor, seleccione este archivo para probar HU06.")
        
        # Ejecutar aplicaci√≥n
        app.run()
        
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")
    
    finally:
        # Limpiar archivo temporal
        try:
            if os.path.exists(demo_file):
                os.remove(demo_file)
                print(f"üóëÔ∏è Archivo de demostraci√≥n eliminado: {demo_file}")
        except:
            pass


def test_destination_validation():
    """Prueba program√°tica de las funciones de validaci√≥n"""
    print("\nüß™ PRUEBAS PROGRAM√ÅTICAS DE VALIDACI√ìN")
    print("-" * 50)
    
    # Crear instancia temporal de la aplicaci√≥n para usar sus m√©todos
    app = MainWindow()
    app.root.withdraw()  # Ocultar la ventana
    
    # Crear directorio temporal para pruebas
    temp_dir = tempfile.mkdtemp()
    print(f"üìÅ Directorio temporal: {temp_dir}")
    
    try:
        # Prueba 1: Validaci√≥n de ruta v√°lida
        valid_path = os.path.join(temp_dir, "archivo_valido.pz")
        result = app.validate_output_path(valid_path)
        print(f"‚úÖ Validaci√≥n de ruta v√°lida: {'PASS' if result else 'FAIL'}")
        
        # Prueba 2: Creaci√≥n de directorio inexistente
        new_dir_path = os.path.join(temp_dir, "nuevo_directorio", "archivo.pz")
        result = app.validate_output_path(new_dir_path)
        created = os.path.exists(os.path.dirname(new_dir_path))
        print(f"‚úÖ Creaci√≥n de directorio: {'PASS' if result and created else 'FAIL'}")
        
        # Prueba 3: Sugerencia autom√°tica de nombre
        demo_file = os.path.join(temp_dir, "archivo_original.txt")
        with open(demo_file, 'w') as f:
            f.write("contenido de prueba")
        
        app.suggest_output_filename(demo_file)
        suggested = app.output_file_path.get()
        has_pz_extension = suggested.endswith('.pz')
        has_compressed_suffix = '_comprimido' in suggested
        print(f"‚úÖ Sugerencia autom√°tica: {'PASS' if has_pz_extension and has_compressed_suffix else 'FAIL'}")
        print(f"   Sugerido: {Path(suggested).name}")
        
        # Prueba 4: Forzado de extensi√≥n .pz
        app.file_info = {'path': demo_file, 'name': 'test.txt'}
        
        # Simular selecci√≥n sin extensi√≥n .pz
        test_path_without_ext = os.path.join(temp_dir, "sin_extension")
        
        # Simular el comportamiento del m√©todo
        final_path = test_path_without_ext
        if not final_path.endswith('.pz'):
            final_path = final_path + '.pz'
        
        print(f"‚úÖ Forzado de extensi√≥n .pz: {'PASS' if final_path.endswith('.pz') else 'FAIL'}")
        print(f"   Original: {Path(test_path_without_ext).name}")
        print(f"   Final: {Path(final_path).name}")
        
        print("\nüéâ Todas las pruebas de validaci√≥n completadas")
        
    except Exception as e:
        print(f"‚ùå Error en pruebas: {e}")
    
    finally:
        # Limpiar
        try:
            import shutil
            shutil.rmtree(temp_dir)
        except:
            pass
        app.root.destroy()


if __name__ == "__main__":
    print("Seleccione el modo de demostraci√≥n:")
    print("1. Demo interactivo (GUI)")
    print("2. Pruebas program√°ticas")
    print("3. Ambos")
    
    choice = input("\nIngrese su opci√≥n (1-3): ").strip()
    
    if choice in ['1', '3']:
        demo_hu06()
    
    if choice in ['2', '3']:
        test_destination_validation()
    
    if choice not in ['1', '2', '3']:
        print("Opci√≥n inv√°lida. Ejecutando demo interactivo por defecto.")
        demo_hu06()
